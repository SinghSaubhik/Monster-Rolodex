{"version":3,"sources":["logo.svg","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/searchbox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","props","react_default","a","createElement","className","src","concat","monster","id","name","email","onClick","deleteMonster","CardList","monsters","map","card_component_Card","key","SaerchBox","_ref","placeholder","handleChange","type","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","arr","console","log","state","filter","m","setState","e","searchField","target","value","_this2","fetch","then","res","json","users","_this$state","fielteredMonsters","toLowerCase","includes","searchbox_component_SaerchBox","card_list_component_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6NCI3BC,qBAAO,SAAAC,GAAK,OACrBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BN,EAAMO,QAAQC,GAAxC,4BACRP,EAAAC,EAAAC,cAAA,UAAKH,EAAMO,QAAQE,MACnBR,EAAAC,EAAAC,cAAA,SAAIH,EAAMO,QAAQG,OAClBT,EAAAC,EAAAC,cAAA,UAAQQ,QAAS,WACbX,EAAMY,cAAcZ,EAAMO,QAAQC,MADtC,aCJKK,EAAW,SAAAb,GAAK,OAC3BC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZJ,EAAMc,SAASC,IAAI,SAAAR,GAAO,OACzBN,EAAAC,EAAAC,cAACa,EAAD,CAAMC,IAAKV,EAAQC,GAAID,QAASA,EAASK,cAAeZ,EAAMY,oBCLvDM,SAAY,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,YAAaC,EAAhBF,EAAgBE,aAAhB,OACvBpB,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SAASkB,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCsD/DG,qBAnDb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAOFI,IAAM,GARQP,EAgBdb,cAAgB,SAACJ,GACfyB,QAAQC,IAAI1B,GACZ,IAAMM,EAAWW,EAAKU,MAAMrB,SAASsB,OAAO,SAAAC,GAC1C,OAAOA,EAAE7B,KAAOA,IAGlBiB,EAAKa,SAAS,CACZxB,SAAUA,KAvBAW,EA4BdJ,aAAe,SAAAkB,GACbd,EAAKa,SAAS,CAACE,YAAaD,EAAEE,OAAOC,SA3BrCjB,EAAKU,MAAQ,CACXrB,SAAU,GACV0B,YAAa,IAJHf,mFAUM,IAAAkB,EAAAf,KAClBgB,MAAM,wDACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAK,OAAIL,EAAKL,SAAS,CAAExB,SAAUkC,uCAmBpC,IAAAC,EAC2BrB,KAAKO,MAA/BrB,EADDmC,EACCnC,SAAU0B,EADXS,EACWT,YACZU,EAAoBpC,EAASsB,OAAO,SAAA7B,GAAO,OAC/CA,EAAQE,KAAK0C,cAAcC,SAASZ,EAAYW,iBAGlD,OACElD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAACkD,EAAD,CACEjC,YAAa,iBACbC,aAAcO,KAAKP,eAErBpB,EAAAC,EAAAC,cAACmD,EAAD,CAAUxC,SAAUoC,EAAmBtC,cAAiBgB,KAAKhB,wBA9CnD2C,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.f09032d6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './card.styles.css';\n\n\nexport const Card = props => (\n    <div className='card-container'>\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n        <button onClick={()=>{\n            props.deleteMonster(props.monster.id)\n            \n        }}>Delete</button>\n    </div>\n);","import React from \"react\";\nimport \"./card-list.styles.css\";\n\nimport {Card} from '../card/card.component';\n\nexport const CardList = props => (\n  <div className=\"card-list\">\n    {props.monsters.map(monster => (\n      <Card key={monster.id} monster={monster} deleteMonster={props.deleteMonster}/>\n    ))}\n  </div>\n);\n","import React from \"react\";\nimport \"./searchbox.styles.css\";\n\nexport const SaerchBox = ({ placeholder, handleChange }) => (\n  <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handleChange} />\n);\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SaerchBox } from \"./components/search-box/searchbox.component\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\"\n    };\n  }\n\n  arr = []\n \n  componentDidMount() {\n    fetch(\"https://sjson.azurewebsites.net/api/4051k21xjyilni54\")\n      .then(res => res.json())\n      .then(users => this.setState({ monsters: users }));\n  }\n\n  deleteMonster = (id)=>{\n    console.log(id);\n    const monsters = this.state.monsters.filter(m => {\n      return m.id !== id\n    })\n    \n    this.setState({\n      monsters: monsters\n    })\n    \n  }\n\n  handleChange = e => {\n    this.setState({searchField: e.target.value})\n  };\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const fielteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <SaerchBox\n          placeholder={\"search monster\"}\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={fielteredMonsters} deleteMonster = {this.deleteMonster}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}